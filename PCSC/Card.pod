=head1 NAME

PCSC::Card - Smarcard communication library

=head1 SYNOPSIS

 $hCard = new PCSC::Card ($hContext,
                        "GemPC430 0 0",
                        $PCSC::SCARD_SHARE_EXCLUSIVE);

 $RecvData = $hCard->Transmit([0xBC,0xB0,0x09,0xC8, 2]);

 $hCard->Disconnect($PCSC::SCARD_LEAVE_CARD);

=head1 DESCRIPTION

The PCSC::Card module implements the PCSC::Card class. Object from this
class are used to communicate with a given reader. They are constructed
out of a reference to a PCSC object that drives the reader.

For more information about PCSC please read the L<PCSC(3pm)> man page.

A PCSC::Card object uses the following propoerty:
 $pcsccard_object->{hContext}   the reference to the underlying pcsc object
 $pcsccard_object->{hCard}      the current pcsc connection handle
 $pcsccard_object->{dwProtocol} the protocol being used

=head1 CONSTRUCTORS

The following methods construct a PCSC::Card object:

=over 4

=item * B<$hCard = new PCSC::Card ($hContext);>

Constructs a new PCSC::Card object without connecting to any reader.

- $hContext is mandatory and contains the reference to a valid PCSC oject.

=item * B<$hCard = new PCSC::Card ($hContext, $reader_name, $share_mode, $prefered_protocol);>

Constructs a new PCSC::Card object and connect to the specified reader.

- $hContext is mandatory and contains the reference to a valid PCSC oject.

- $reader_name is the name of the reader you want to connect to.  It is of the form "GCR 410 0 0".

Please note that the list of available readers can be obtained with a
call to $hContext->ListReaders(). (See the section named 'PCSC METHODS'
in the L<PCSC(3pm)> man page for more informations on ListReaders).

- $share_mode is the desired mode of connection to the reader. It can be
any of the following:
 $PCSC::SCARD_SHARE_EXCLUSIVE  the application do not share the reader
 $PCSC::SCARD_SHARE_SHARED     the application will allow others to share the reader.
 $PCSC::SCARD_SHARE_DIRECT     (not used by PCSClite)

- $prefered_protocol is the protocol which should be used if possible.
If the protocol is not available, an other protocol will be used and
$hCard->{dwProtocol} will be set accordingly. Both $hCard->{dwProtocol}
and $prefered_protocol accept the following values:
 $PCSC::SCARD_PROTOCOL_T0   the T=0 protocol
 $PCSC::SCARD_PROTOCOL_T1   the T=1 protocol
 $PCSC::SCARD_PROTOCOL_RAW  raw protocol

=item * B<$hCard = new PCSC::Card ($hContext, $reader_name, $share_mode);>

This method is equivalent to:
 $hCard = new PCSC::Card ($hContext,
                        $reader_name,
                        $share_mode,
                        $PCSC::SCARD_PROTOCOL_T0);

=item * B<$hCard = new PCSC::Card ($hContext, $reader_name);>

This method is equivalent to:
 $hCard = new PCSC::Card ($hContext,
                        $reader_name,
                        $PCSC::SCARD_SHARE_EXCLUSIVE,
                        $PCSC::SCARD_PROTOCOL_T0);

=back

=head1 CONSTRUCTION FAILURE

PCSC::Card constructors return an undef value when the object can not
be created. $PCSC::errno can be used to get more information about the
error. (See section L<ERROR HANDLING> in L<PCSC(3pm)> man page for
more information)

=head1 PCSC::Card METHODS

Here is a list of all the methods that can be used with a PCSC::Card object.

=over 4

=item * B<$hCard-E<gt>Connect($reader_name, $share_mode, $prefered_protocol);>

Connect() can be used to connect to the reader and its smartcard if
the connection has not been established yet. The default constructor
can establish the connection if given enougth parameters.

The return value upon successful completion is the protocol used
to communicate with the smartcard. It can be any of the following:
 $PCSC::SCARD_PROTOCOL_T0   the T=0 protocol
 $PCSC::SCARD_PROTOCOL_T1   the T=1 protocol
 $PCSC::SCARD_PROTOCOL_RAW  raw protocol

- $reader_name is mandatory. It contains the name of the reader you want to connect to.
It is of the form "GCR 410 0 0".

Please note that the list of available readers can be obtained with a
call to $hContext->ListReaders(). (See the section named 'PCSC METHODS'
in the L<PCSC(3pm)> man page for more informations on ListReaders).

- $share_mode is the desired mode of connection to the reader. It can be any
of the following:
 $PCSC::SCARD_SHARE_EXCLUSIVE  the application do not share the reader
 $PCSC::SCARD_SHARE_SHARED     the application will allow others to share the reader.
 $PCSC::SCARD_SHARE_DIRECT     (not used by PCSClite)

- $prefered_protocol is the protocol which should be used if possible. If
the protocol is not available, an other protocol will be used and $hCard->{dwProtocol}
will be set accordingly. $prefered_protocol accept the following values:
 $PCSC::SCARD_PROTOCOL_T0   the T=0 protocol
 $PCSC::SCARD_PROTOCOL_T1   the T=1 protocol
 $PCSC::SCARD_PROTOCOL_RAW  raw protocol

=item * B<$hCard-E<gt>Connect($reader_name, $share_mode);>

This method is equivalent to:
 $hCard->Connect($reader_name,
                 $share_mode,
                 $PCSC::SCARD_PROTOCOL_T0);

=item * B<$hCard-E<gt>Connect($reader_name);>

This method is equivalent to:
 $hCard->Connect($reader_name,
                 $PCSC::SCARD_SHARE_EXCLUSIVE,
                 $PCSC::SCARD_PROTOCOL_T0);

=item * B<$hCard-E<gt>Reconnect($share_mode, $prefered_protocol, $initialization);>

Reconnect() can be used to re-nogociate an already opened connection. This implies
that the PCSC::Card object is connected and has $hCard->{hCard} set accordingly. 
Reconnecting to a smartcard is used to change the share mode and the current
protocol.

The return value upon successful completion is the protocol choosed
to communicate with the smartcard. It can be any of the following:
 $PCSC::SCARD_PROTOCOL_T0   the T=0 protocol
 $PCSC::SCARD_PROTOCOL_T1   the T=1 protocol
 $PCSC::SCARD_PROTOCOL_RAW  raw protocol

- $share_mode is the desired mode of connection to the reader. It can be any
of the following:
 $PCSC::SCARD_SHARE_EXCLUSIVE  the application do not share the reader
 $PCSC::SCARD_SHARE_SHARED     the application will allow others to share the reader.
 $PCSC::SCARD_SHARE_DIRECT     (not used by PCSClite)

- $prefered_protocol is the protocol which should be used if possible. If
the protocol is not available, an other protocol will be used and $hCard->{dwProtocol}
will be set accordingly. $prefered_protocol accept the following values:
 $PCSC::SCARD_PROTOCOL_T0   the T=0 protocol
 $PCSC::SCARD_PROTOCOL_T1   the T=1 protocol
 $PCSC::SCARD_PROTOCOL_RAW  raw protocol

- $initialization is the action to take when reconnecting to the smartcard. It can be
any of the following values:
 $PCSC::SCARD_LEAVE_CARD    do nothing on close
 $PCSC::SCARD_RESET_CARD    reset on close
 $PCSC::SCARD_UNPOWER_CARD  power down on close
 $PCSC::SCARD_EJECT_CARD    eject on close

=item * B<$hCard-E<gt>Reconnect($share_mode, $prefered_protocol);>

This method is equivalent to:
 $hCard->Reconnect($share_mode,
                   $prefered_protocol,
                   $PCSC::SCARD_LEAVE_CARD);

=item * B<$hCard-E<gt>Reconnect($share_mode);>

This method is equivalent to:
 $hCard->Reconnect($share_mode,
                   $PCSC::SCARD_PROTOCOL_T0,
                   $PCSC::SCARD_LEAVE_CARD);

=item * B<$hCard-E<gt>Reconnect();>

This method is equivalent to:
 $hCard->Reconnect($PCSC::SCARD_SHARE_EXCLUSIVE,
                   $PCSC::SCARD_PROTOCOL_T0,
                   $PCSC::SCARD_LEAVE_CARD);

=item * B<$hCard-E<gt>Disconnect($initialization);>

Disconnect() closes the connection to the smartcard reader. It returns true
upon successful completion or undef otherwise. $hCard->{hContext} will be set to undef
if the connection is successfuly closed.

- $initialization is the action to take when reconnecting to the smartcard. It can be
any of the following values:
 $PCSC::SCARD_LEAVE_CARD    do nothing on close
 $PCSC::SCARD_RESET_CARD    reset on close
 $PCSC::SCARD_UNPOWER_CARD  power down on close
 $PCSC::SCARD_EJECT_CARD    eject on close

=item * B<$hCard-E<gt>Disconnect();>

This method is equivalent to:
 $hCard->Disconnect($PCSC::SCARD_EJECT_CARD);

=item * B<$hCard-E<gt>Status();>

Status() returns the current status of the connection to a smartcard. It
is used to retrieve the ATR (Answer To Reset) value as well as the protocol
being used to communicate.

The return value is the undef value if an error occurs. In such case, $!
should be set with a string describing the error. Upon successful completion
Status returns an array as follows: ($reader_name, $reader_state, $protocol, \@atr)

- $reader_name is a string containing the name of the reader

- $reader_state is a scalar containing the current state of the reader. It can
be any combination of the following values:
 $PCSC::SCARD_UNKNOWN     unknown state
 $PCSC::SCARD_ABSENT      card is absent
 $PCSC::SCARD_PRESENT     card is present
 $PCSC::SCARD_SWALLOWED   card not powered
 $PCSC::SCARD_POWERED     card is powered
 $PCSC::SCARD_NEGOTIABLE  ready for PTS
 $PCSC::SCARD_SPECIFIC    PTS has been set

- $protocol is the protocol being used. It can be any of the following values:
 $PCSC::SCARD_PROTOCOL_T0,
 $PCSC::SCARD_PROTOCOL_T1,
 $PCSC::SCARD_PROTOCOL_RAW

- \@atr is a reference to an array containing the ATR. Each cell of the array
contains one byte of the ATR. This parameter is however optional as the
ATR may not be available under some circumstances. For instance when the
card is not inserted, no ATR can be returned and this parameter will be
'undef'

=item * B<$hCard-E<gt>Transmit(\@data);>

Transmit() is used to exchange data with the card.

It returns a reference to an anonymous array holding the answer to the emitted data.
In case of an error, the reference is the undef value.

- \@data is a reference to the data to be sent to the card.

Here is a small sample of how to use transmit:

 $SendData = [0x00,0xA4,0x01,0x00, 0x02, 0x01, 0x00];
 $RecvData = $hCard->Transmit($SendData);

 print "  Recv = ";
 foreach $tmpVal (@{$RecvData}) {
     printf ("%02X ", $tmpVal);
 } print "\n";

=item * B<$hCard-E<gt>BeginTransaction();>

BeginTransaction() is used to temporarily get exclusive control over the
smart card.

It returns TRUE upon succesful completion and FALSE otherwise.
$PCSC::errno should be set accordingly in case of an error (See section
L<ERROR HANDLING> in L<PCSC(3pm)> man page for more information)

=item * B<$hCard-E<gt>EndTransaction($disposition);>

EndTransaction() is used to end a transaction initiated with
BeginTransaction().

It returns TRUE upon succesful completion and FALSE otherwise.
$PCSC::errno should be set accordingly in case of an error (See section
L<ERROR HANDLING> in L<PCSC(3pm)> man page for more information)

- $disposition is the action to take when ending the transaction. It can be
any of the following values:
 $PCSC::SCARD_LEAVE_CARD    do nothing on close
 $PCSC::SCARD_RESET_CARD    reset on close
 $PCSC::SCARD_UNPOWER_CARD  power down on close
 $PCSC::SCARD_EJECT_CARD    eject on close

=item * B<$hCard-E<gt>EndTransaction();>

This method is equivalent to:
 $hCard->EndTransaction($PCSC::SCARD_LEAVE_CARD);

=head1 SEE ALSO

L<PCSClite> manpage has useful informations about PCSClite.
L<PCSC(3pm)> manpage holds all the necessary information to create the PCSC
object which will be the basis of PCSC::Card.

=head1 COPYRIGHT

Please see the copyright file included with your distribution

=head1 AUTHORS / ACKNOWLEDGEMENT

 Lionel VICTOR <lionel.victor@unforgettable.com>
               <lionel.victor@free.fr>

=cut
